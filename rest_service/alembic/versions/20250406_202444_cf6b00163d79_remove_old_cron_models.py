"""Remove old cron models

Revision ID: cf6b00163d79
Revises: d4ce9c701e57
Create Date: 2025-04-06 20:24:44.953480+00:00

"""
from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "cf6b00163d79"
down_revision: Union[str, None] = "d4ce9c701e57"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("cronjobnotification")
    op.drop_table("cronjobrecord")
    op.drop_table("cronjob")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "cronjobrecord",
        sa.Column(
            "created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "updated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
        ),
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("cron_job_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "started_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "finished_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "status",
            postgresql.ENUM(
                "CREATED", "RUNNING", "DONE", "FAILED", name="cronjobstatus"
            ),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["cron_job_id"], ["cronjob.id"], name="cronjobrecord_cron_job_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="cronjobrecord_pkey"),
    )
    op.create_table(
        "cronjob",
        sa.Column(
            "created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "updated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('cronjob_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "type",
            postgresql.ENUM("NOTIFICATION", "SCHEDULE", name="cronjobtype"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("cron_expression", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("is_active", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"], ["telegramuser.id"], name="cronjob_user_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="cronjob_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "cronjobnotification",
        sa.Column(
            "created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "updated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
        ),
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("cron_job_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("message", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["cron_job_id"], ["cronjob.id"], name="cronjobnotification_cron_job_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="cronjobnotification_pkey"),
    )
    # ### end Alembic commands ###
