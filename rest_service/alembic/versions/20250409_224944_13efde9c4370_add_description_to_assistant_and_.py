"""Add description to Assistant and timezone/preferred_name to User

Revision ID: 13efde9c4370
Revises: cf6b00163d79
Create Date: 2025-04-09 22:49:44.647461+00:00

"""
from typing import Sequence, Union

import sqlalchemy as sa
import sqlmodel
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "13efde9c4370"
down_revision: Union[str, None] = "cf6b00163d79"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # op.drop_table("checkpoint_migrations")
    # op.drop_index("checkpoint_blobs_thread_id_idx", table_name="checkpoint_blobs")
    # op.drop_table("checkpoint_blobs")
    # op.drop_index("checkpoint_writes_thread_id_idx", table_name="checkpoint_writes")
    # op.drop_table("checkpoint_writes")
    # op.drop_index("checkpoints_thread_id_idx", table_name="checkpoints")
    # op.drop_table("checkpoints")
    op.add_column(
        "assistant",
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    )
    op.add_column(
        "telegramuser",
        sa.Column("timezone", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    )
    op.add_column(
        "telegramuser",
        sa.Column("preferred_name", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    )
    op.create_index(
        op.f("ix_telegramuser_timezone"), "telegramuser", ["timezone"], unique=False
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_telegramuser_timezone"), table_name="telegramuser")
    op.drop_column("telegramuser", "preferred_name")
    op.drop_column("telegramuser", "timezone")
    op.drop_column("assistant", "description")
    # op.create_table(
    #     "checkpoints",
    #     sa.Column("thread_id", sa.TEXT(), autoincrement=False, nullable=False),
    #     sa.Column(
    #         "checkpoint_ns",
    #         sa.TEXT(),
    #         server_default=sa.text("''::text"),
    #         autoincrement=False,
    #         nullable=False,
    #     ),
    #     sa.Column("checkpoint_id", sa.TEXT(), autoincrement=False, nullable=False),
    #     sa.Column(
    #         "parent_checkpoint_id", sa.TEXT(), autoincrement=False, nullable=True
    #     ),
    #     sa.Column("type", sa.TEXT(), autoincrement=False, nullable=True),
    #     sa.Column(
    #         "checkpoint",
    #         postgresql.JSONB(astext_type=sa.Text()),
    #         autoincrement=False,
    #         nullable=False,
    #     ),
    #     sa.Column(
    #         "metadata",
    #         postgresql.JSONB(astext_type=sa.Text()),
    #         server_default=sa.text("'{}'::jsonb"),
    #         autoincrement=False,
    #         nullable=False,
    #     ),
    #     sa.PrimaryKeyConstraint(
    #         "thread_id", "checkpoint_ns", "checkpoint_id", name="checkpoints_pkey"
    #     ),
    # )
    # op.create_index(
    #     "checkpoints_thread_id_idx", "checkpoints", ["thread_id"], unique=False
    # )
    # op.create_table(
    #     "checkpoint_writes",
    #     sa.Column("thread_id", sa.TEXT(), autoincrement=False, nullable=False),
    #     sa.Column(
    #         "checkpoint_ns",
    #         sa.TEXT(),
    #         server_default=sa.text("''::text"),
    #         autoincrement=False,
    #         nullable=False,
    #     ),
    #     sa.Column("checkpoint_id", sa.TEXT(), autoincrement=False, nullable=False),
    #     sa.Column("task_id", sa.TEXT(), autoincrement=False, nullable=False),
    #     sa.Column("idx", sa.INTEGER(), autoincrement=False, nullable=False),
    #     sa.Column("channel", sa.TEXT(), autoincrement=False, nullable=False),
    #     sa.Column("type", sa.TEXT(), autoincrement=False, nullable=True),
    #     sa.Column("blob", postgresql.BYTEA(), autoincrement=False, nullable=False),
    #     sa.Column(
    #         "task_path",
    #         sa.TEXT(),
    #         server_default=sa.text("''::text"),
    #         autoincrement=False,
    #         nullable=False,
    #     ),
    #     sa.PrimaryKeyConstraint(
    #         "thread_id",
    #         "checkpoint_ns",
    #         "checkpoint_id",
    #         "task_id",
    #         "idx",
    #         name="checkpoint_writes_pkey",
    #     ),
    # )
    # op.create_index(
    #     "checkpoint_writes_thread_id_idx",
    #     "checkpoint_writes",
    #     ["thread_id"],
    #     unique=False,
    # )
    # op.create_table(
    #     "checkpoint_blobs",
    #     sa.Column("thread_id", sa.TEXT(), autoincrement=False, nullable=False),
    #     sa.Column(
    #         "checkpoint_ns",
    #         sa.TEXT(),
    #         server_default=sa.text("''::text"),
    #         autoincrement=False,
    #         nullable=False,
    #     ),
    #     sa.Column("channel", sa.TEXT(), autoincrement=False, nullable=False),
    #     sa.Column("version", sa.TEXT(), autoincrement=False, nullable=False),
    #     sa.Column("type", sa.TEXT(), autoincrement=False, nullable=False),
    #     sa.Column("blob", postgresql.BYTEA(), autoincrement=False, nullable=True),
    #     sa.PrimaryKeyConstraint(
    #         "thread_id",
    #         "checkpoint_ns",
    #         "channel",
    #         "version",
    #         name="checkpoint_blobs_pkey",
    #     ),
    # )
    # op.create_index(
    #     "checkpoint_blobs_thread_id_idx",
    #     "checkpoint_blobs",
    #     ["thread_id"],
    #     unique=False,
    # )
    # op.create_table(
    #     "checkpoint_migrations",
    #     sa.Column("v", sa.INTEGER(), autoincrement=False, nullable=False),
    #     sa.PrimaryKeyConstraint("v", name="checkpoint_migrations_pkey"),
    # )
    # ### end Alembic commands ###
