services:
  assistant_service:
    build:
      context: .
      dockerfile: assistant_service/Dockerfile
    container_name: assistant-service
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPEN_API_SECRETAR_ID=${OPEN_API_SECRETAR_ID}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_DB=${REDIS_DB}
      - REDIS_QUEUE_TO_TELEGRAM=${REDIS_QUEUE_TO_TELEGRAM}
      - REDIS_QUEUE_TO_SECRETARY=${REDIS_QUEUE_TO_SECRETARY}
      - TAVILY_API_KEY=${TAVILY_API_KEY}
    env_file:
      - .env
    volumes:
      - ./assistant_service/src:/src
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - app_network

  telegram_bot_service:
    build:
      context: .
      dockerfile: telegram_bot_service/Dockerfile
    container_name: telegram-bot-service
    environment:
      - ASYNC_DATABASE_URL=postgresql+asyncpg://user:password@db/rest_db
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GOOGLE_REDIRECT_URI=${GOOGLE_REDIRECT_URI}
      - OPEN_API_SECRETAR_ID=${OPEN_API_SECRETAR_ID}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - REDIS_DB=${REDIS_DB}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_QUEUE_TO_SECRETARY=${REDIS_QUEUE_TO_SECRETARY}
      - REDIS_QUEUE_TO_TELEGRAM=${REDIS_QUEUE_TO_TELEGRAM}
      - REST_SERVICE_URL=http://rest_service:8000
      - TELEGRAM_BOT_USERNAME=${TELEGRAM_BOT_USERNAME}
      - TELEGRAM_ID=${TELEGRAM_ID}
      - TELEGRAM_TOKEN=${TELEGRAM_TOKEN}
    volumes:
      - ./telegram_bot_service/src:/src  # для разработки
    depends_on:
      redis:
        condition: service_healthy
      rest_service:
        condition: service_healthy
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "pidof", "python"]
      interval: 10s
      timeout: 10s
      retries: 3

  db:
      image: postgres:15
      container_name: postgres_db
      environment:
        POSTGRES_USER: ${POSTGRES_USER}
        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        POSTGRES_DB: ${POSTGRES_DB}
      volumes:
        - postgres_data:/var/lib/postgresql/data
      ports:
        - "5432:5432"
      networks:
        - app_network
      healthcheck:
        test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
        interval: 3s
        timeout: 5s
        retries: 6

  rest_service:
      build:
        context: .
        dockerfile: rest_service/Dockerfile
      container_name: rest-service
      environment:
        - ASYNC_DATABASE_URL=${ASYNC_DATABASE_URL}
      env_file:
        - .env
      ports:
        - "8000:8000"
      volumes:
        - ./rest_service/src:/src
      depends_on:
        db:
          condition: service_healthy
      networks:
        - app_network
      healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
        interval: 5s
        timeout: 5s
        retries: 8

  cron_service:
    build:
      context: .
      dockerfile: cron_service/Dockerfile
    container_name: cron-service
    environment:
      - TELEGRAM_ID=${TELEGRAM_ID}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_DB=${REDIS_DB}
      - REDIS_QUEUE_TO_TELEGRAM=${REDIS_QUEUE_TO_TELEGRAM}
      - REDIS_QUEUE_TO_SECRETARY=${REDIS_QUEUE_TO_SECRETARY}
    volumes:
      - ./cron_service/src:/src  # для разработки
    depends_on:
      redis:
        condition: service_healthy
      rest_service:
        condition: service_healthy
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "ps", "aux", "|", "grep", "python"]
      interval: 30s
      timeout: 10s
      retries: 3

  google_calendar_service:
    build:
      context: .
      dockerfile: google_calendar_service/Dockerfile
    container_name: google-calendar-service
    ports:
      - "8001:8000"
    environment:
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GOOGLE_REDIRECT_URI=${GOOGLE_REDIRECT_URI}
      - REST_SERVICE_URL=http://rest_service:8000
      - TELEGRAM_BOT_USERNAME=${TELEGRAM_BOT_USERNAME}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_DB=${REDIS_DB}
      - REDIS_QUEUE_TO_TELEGRAM=${REDIS_QUEUE_TO_TELEGRAM}
      - REDIS_QUEUE_TO_SECRETARY=${REDIS_QUEUE_TO_SECRETARY}
    env_file:
      - .env
    volumes:
      - ./google_calendar_service/src:/src
      - ./shared_models:/shared_models
    depends_on:
      rest_service:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  admin_service:
    build:
      context: .
      dockerfile: admin_service/Dockerfile
    container_name: admin-service
    environment:
      - REST_SERVICE_URL=http://rest_service:8000
    env_file:
      - .env
    ports:
      - "8501:8501"
    volumes:
      - ./admin_service/src:/src
    depends_on:
      rest_service:
        condition: service_healthy
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 2s
      timeout: 3s
      retries: 4

  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant
    restart: always
    ports:
      - "6333:6333" # REST API
      - "6334:6334" # gRPC API
    volumes:
      - ./qdrant_data:/qdrant/storage # Persistent storage for Qdrant data
    environment:
      QDRANT__SERVICE__GRPC_PORT: 6334 # Optional: Specify gRPC port
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 10s
      timeout: 5s
      retries: 3

networks:
  app_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
