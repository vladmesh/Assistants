services:
  assistant:
    build:
      context: ./assistant
    container_name: assistant_service
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - redis
    networks:
      - app_network

  bot:
    build:
      context: ./tg_bot
    container_name: telegram_bot
    environment:
      - TELEGRAM_TOKEN=${TELEGRAM_TOKEN}
      - REST_SERVICE_URL=http://rest_service:8000
    depends_on:
      - assistant
      - db
      - notification_service
      - rest_service
    networks:
      - app_network

  db:
      image: postgres:15
      container_name: postgres_db
      environment:
        POSTGRES_USER: ${POSTGRES_USER}
        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        POSTGRES_DB: ${POSTGRES_DB}
      volumes:
        - postgres_data:/var/lib/postgresql/data
      ports:
        - "5432:5432"
      networks:
        - app_network

  rest_service:
      build:
        context: ./rest_service
      container_name: rest_service
      environment:
        DATABASE_URL: ${DATABASE_URL}
      ports:
        - "8000:8000"
      depends_on:
        - db
      networks:
        - app_network

  cron_service:
    build:
      context: ./cron_service
    environment:
      - NOTIFICATION_SERVICE_URL=http://notification_service:8000
      - TELEGRAM_ID=${TELEGRAM_ID}
      - DATABASE_URL=${DATABASE_URL}
    depends_on:
      - rest_service
      - notification_service
    restart: unless-stopped
    networks:
      - app_network

  notification_service:
    build:
      context: ./notification_service
    container_name: notification_service
    environment:
      - TELEGRAM_TOKEN=${TELEGRAM_TOKEN}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    ports:
      - "8001:8000"
    depends_on:
      - redis
    networks:
      - app_network

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app_network

networks:
  app_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
