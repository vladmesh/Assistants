services:
  assistant_service:
    build:
      context: ./assistant_service
      dockerfile: Dockerfile
    container_name: assistant-service
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPEN_API_SECRETAR_ID=${OPEN_API_SECRETAR_ID}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_DB=${REDIS_DB}
      - REDIS_QUEUE_TO_TELEGRAM=${REDIS_QUEUE_TO_TELEGRAM}
      - REDIS_QUEUE_TO_SECRETARY=${REDIS_QUEUE_TO_SECRETARY}
    env_file:
      - .env
    volumes:
      - ./assistant_service/src:/src
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - app_network

  telegram_bot_service:
    build:
      context: ./telegram_bot_service
      dockerfile: Dockerfile
    container_name: telegram-bot-service
    depends_on:
      redis:
        condition: service_started
        required: true
      rest_service:
        condition: service_started
        required: true
    environment:
      ASYNC_DATABASE_URL: postgresql+asyncpg://user:password@db/rest_db
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      GOOGLE_REDIRECT_URI: ${GOOGLE_REDIRECT_URI}
      OPEN_API_SECRETAR_ID: ${OPEN_API_SECRETAR_ID}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      REDIS_DB: ${REDIS_DB}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_QUEUE_TO_SECRETARY: ${REDIS_QUEUE_TO_SECRETARY}
      REDIS_QUEUE_TO_TELEGRAM: ${REDIS_QUEUE_TO_TELEGRAM}
      REST_SERVICE_URL: http://rest_service:8000
      TELEGRAM_BOT_USERNAME: ${TELEGRAM_BOT_USERNAME}
      TELEGRAM_ID: ${TELEGRAM_ID}
      TELEGRAM_TOKEN: ${TELEGRAM_TOKEN}
    networks:
      app_network: null

  db:
      image: postgres:15
      container_name: postgres_db
      environment:
        POSTGRES_USER: ${POSTGRES_USER}
        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        POSTGRES_DB: ${POSTGRES_DB}
      volumes:
        - postgres_data:/var/lib/postgresql/data
      ports:
        - "5432:5432"
      networks:
        - app_network
      healthcheck:
        test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
        interval: 5s
        timeout: 5s
        retries: 5

  rest_service:
      build:
        context: ./rest_service
      container_name: rest-service
      environment:
        ASYNC_DATABASE_URL: ${ASYNC_DATABASE_URL}
      ports:
        - "8000:8000"
      depends_on:
        - db
      networks:
        - app_network

  cron_service:
    build:
      context: ./cron_service
    container_name: cron-service
    environment:
      - TELEGRAM_ID=${TELEGRAM_ID}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_DB=${REDIS_DB}
      - REDIS_QUEUE_TO_TELEGRAM=${REDIS_QUEUE_TO_TELEGRAM}
      - REDIS_QUEUE_TO_SECRETARY=${REDIS_QUEUE_TO_SECRETARY}
    env_file:
      - .env
    depends_on:
      - rest_service
      - redis
    restart: unless-stopped
    networks:
      - app_network

  google_calendar_service:
    build:
      context: ./google_calendar_service
      dockerfile: Dockerfile
    container_name: google-calendar-service
    ports:
      - "8001:8000"
    environment:
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GOOGLE_REDIRECT_URI=${GOOGLE_REDIRECT_URI}
      - REST_SERVICE_URL=http://rest_service:8000
      - TELEGRAM_BOT_USERNAME=${TELEGRAM_BOT_USERNAME}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_DB=${REDIS_DB}
      - REDIS_QUEUE_TO_TELEGRAM=${REDIS_QUEUE_TO_TELEGRAM}
      - REDIS_QUEUE_TO_SECRETARY=${REDIS_QUEUE_TO_SECRETARY}
    env_file:
      - .env
    depends_on:
      - rest_service
      - redis
    command: uvicorn main:app --host 0.0.0.0 --port 8000
    networks:
      - app_network

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3

networks:
  app_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
