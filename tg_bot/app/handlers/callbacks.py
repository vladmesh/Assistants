from telegram import Update
from telegram.ext import ContextTypes

from app.utils.keyboard import get_task_keyboard, get_status_keyboard, format_task_message, get_main_menu_keyboard
from app.rest_client import RestClient


async def add_task(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏."""
    query = update.callback_query
    await query.answer()
    
    context.user_data["state"] = "waiting_for_task_name"
    await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")


async def handle_new_task(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏."""
    if context.user_data.get("state") == "waiting_for_task_name":
        context.user_data["task_name"] = update.message.text
        context.user_data["state"] = "waiting_for_task_description"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip):")
    elif context.user_data.get("state") == "waiting_for_task_description":
        context.user_data["task_description"] = update.message.text
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        rest_client = RestClient()
        user = rest_client.get_or_create_user(
            telegram_id=update.effective_user.id,
            username=update.effective_user.username
        )
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
        task = rest_client.create_task(
            user_id=user["id"],
            name=context.user_data["task_name"],
            description=context.user_data["task_description"]
        )
        
        await update.message.reply_text(
            "‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!",
            reply_markup=get_main_menu_keyboard()
        )
        context.user_data.clear()


async def skip_description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–ø—É—Å–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏."""
    if context.user_data.get("state") == "waiting_for_task_description":
        context.user_data["task_description"] = "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        rest_client = RestClient()
        user = rest_client.get_or_create_user(
            telegram_id=update.effective_user.id,
            username=update.effective_user.username
        )
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
        task = rest_client.create_task(
            user_id=user["id"],
            name=context.user_data["task_name"],
            description=context.user_data["task_description"]
        )
        
        await update.message.reply_text(
            "‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!",
            reply_markup=get_main_menu_keyboard()
        )
        context.user_data.clear()


async def tasks(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á."""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    rest_client = RestClient()
    user = rest_client.get_or_create_user(
        telegram_id=update.effective_user.id,
        username=update.effective_user.username
    )
    tasks_list = rest_client.get_user_tasks(user["id"])
    
    if not tasks_list:
        await query.message.reply_text(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.",
            reply_markup=get_main_menu_keyboard()
        )
        return
    
    message = "üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n\n"
    for task in tasks_list:
        message += format_task_message(task) + "\n\n"
    
    await query.message.reply_text(
        message,
        reply_markup=get_main_menu_keyboard(),
        parse_mode="Markdown"
    )


async def edit_task(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏."""
    query = update.callback_query
    await query.answer()
    
    task_id = int(query.data.split("_")[1])
    # TODO: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    task = {"id": task_id, "name": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞", "status": "–í –ø—Ä–æ—Ü–µ—Å—Å–µ"}
    
    await query.message.reply_text(
        format_task_message(task),
        reply_markup=get_task_keyboard(task_id),
        parse_mode="Markdown"
    )


async def edit_status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏."""
    query = update.callback_query
    await query.answer()
    
    task_id = int(query.data.split("_")[1])
    await query.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:",
        reply_markup=get_status_keyboard(task_id)
    )


async def set_status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏."""
    query = update.callback_query
    await query.answer()
    
    _, task_id, status = query.data.split("_")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
    rest_client = RestClient()
    task = rest_client.update_task_status(task_id, status)
    
    await query.message.reply_text(
        f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: {status}",
        reply_markup=get_main_menu_keyboard()
    ) 