from telegram import Update
from telegram.ext import ContextTypes
from app.utils.keyboard import get_main_menu_keyboard, format_task_message
from app.handlers.base import BaseHandler, require_user
import logging

logger = logging.getLogger(__name__)


class TaskHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏."""
    
    @require_user
    async def add_task(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏."""
        try:
            query = update.callback_query
            await query.answer()
            
            self.set_user_state(context, {"state": "waiting_for_task_name"})
            await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
        except Exception as e:
            await self.handle_error(update, context, e)
    
    @require_user
    async def handle_new_task(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏."""
        try:
            state = self.get_user_state(context)
            text = update.message.text
            
            if not self.validate_input(text):
                await update.message.reply_text(
                    "–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 1 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤."
                )
                return
            
            if state.get("state") == "waiting_for_task_name":
                state["task_name"] = text
                state["state"] = "waiting_for_task_description"
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip):")
            elif state.get("state") == "waiting_for_task_description":
                state["task_description"] = text
                await self._create_task(update, context)
        except Exception as e:
            await self.handle_error(update, context, e)
    
    @require_user
    async def skip_description(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–ø—É—Å–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏."""
        try:
            state = self.get_user_state(context)
            if state.get("state") == "waiting_for_task_description":
                state["task_description"] = "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"
                await self._create_task(update, context)
        except Exception as e:
            await self.handle_error(update, context, e)
    
    async def _create_task(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É."""
        state = self.get_user_state(context)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = self.rest_client.get_or_create_user(
            telegram_id=update.effective_user.id,
            username=update.effective_user.username
        )
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
        task = self.rest_client.create_task(
            user_id=user["id"],
            name=state["task_name"],
            description=state["task_description"]
        )
        
        logger.info(f"Created task {task['id']} for user {user['id']}")
        
        await update.message.reply_text(
            "‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!",
            reply_markup=get_main_menu_keyboard()
        )
        self.clear_user_state(context)
    
    @require_user
    async def list_tasks(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á."""
        try:
            query = update.callback_query
            await query.answer()
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = self.rest_client.get_or_create_user(
                telegram_id=update.effective_user.id,
                username=update.effective_user.username
            )
            tasks_list = self.rest_client.get_user_tasks(user["id"])
            
            if not tasks_list:
                await query.message.reply_text(
                    "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.",
                    reply_markup=get_main_menu_keyboard()
                )
                return
            
            message = "üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n\n"
            for task in tasks_list:
                message += format_task_message(task) + "\n\n"
            
            await query.message.reply_text(
                message,
                reply_markup=get_main_menu_keyboard(),
                parse_mode="Markdown"
            )
        except Exception as e:
            await self.handle_error(update, context, e)
    
    @require_user
    async def update_task_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏."""
        try:
            query = update.callback_query
            await query.answer()
            
            _, task_id, status = query.data.split("_")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
            task = self.rest_client.update_task_status(task_id, status)
            logger.info(f"Updated task {task_id} status to {status}")
            
            await query.message.reply_text(
                f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: {status}",
                reply_markup=get_main_menu_keyboard()
            )
        except Exception as e:
            await self.handle_error(update, context, e) 