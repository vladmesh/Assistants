"""Tools page of the admin panel"""

import pandas as pd
import streamlit as st
from rest_client import RestServiceClient, ToolCreate, ToolUpdate
from utils.async_utils import run_async


def show_tools_page(rest_client: RestServiceClient):
    """Display tools page with management functionality."""
    st.title("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤
    tools = run_async(rest_client.get_tools())
    assistants = run_async(rest_client.get_assistants())

    if not tools:
        st.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
    else:
        # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        tools_data = []
        for tool in tools:
            tools_data.append(
                {
                    "ID": str(tool.id),
                    "–ò–º—è": tool.name,
                    "–¢–∏–ø": tool.tool_type,
                    "–û–ø–∏—Å–∞–Ω–∏–µ": tool.description,
                    "–ê–∫—Ç–∏–≤–µ–Ω": "–î–∞" if tool.is_active else "–ù–µ—Ç",
                }
            )

        tools_df = pd.DataFrame(tools_data)

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        st.subheader("–°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
        st.dataframe(tools_df, hide_index=True, use_container_width=True)

        # –°–µ–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        st.subheader("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞")

        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
        tool_options = {f"{tool.name} ({tool.tool_type})": tool for tool in tools}
        selected_tool_name = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
            options=list(tool_options.keys()),
            index=None,
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç...",
        )

        if selected_tool_name:
            tool = tool_options[selected_tool_name]

            with st.expander("–§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", expanded=True):
                with st.form("edit_tool_form"):
                    st.write(f"**–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞:** {tool.name}")
                    new_description = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ", value=tool.description)
                    new_is_active = st.checkbox("–ê–∫—Ç–∏–≤–µ–Ω", value=tool.is_active)

                    col1, col2, col3 = st.columns([1, 1, 1])
                    with col1:
                        submit_button = st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
                    with col2:
                        cancel_button = st.form_submit_button("‚ùå –û—Ç–º–µ–Ω–∞")
                    with col3:
                        delete_button = st.form_submit_button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å")

                    if submit_button:
                        with st.spinner("–û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç..."):
                            updated_tool = ToolUpdate(
                                description=new_description,
                                is_active=new_is_active,
                            )
                            run_async(rest_client.update_tool(tool.id, updated_tool))
                            st.success(f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {tool.name} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
                            st.rerun()

                    if cancel_button:
                        st.rerun()

                    if delete_button:
                        if st.checkbox("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ", key="confirm_delete"):
                            with st.spinner("–£–¥–∞–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç..."):
                                run_async(rest_client.delete_tool(tool.id))
                                st.success(f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {tool.name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
                                st.rerun()

    # –°–µ–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    with st.expander("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–¥-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç", expanded=False):
        with st.form("create_tool_form"):
            name = st.text_input("–ò–º—è")
            description = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ")
            is_active = st.checkbox("–ê–∫—Ç–∏–≤–µ–Ω", value=True)

            # –í—ã–±–æ—Ä –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–¥-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            assistant_options = {a.name: a for a in assistants if a.is_active}
            if not assistant_options:
                st.error(
                    "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"
                )
            else:
                selected_assistant = st.selectbox(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞",
                    options=list(assistant_options.keys()),
                )

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è input_schema
            input_schema = st.text_area(
                "–°—Ö–µ–º–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (JSON)",
                value='{"type": "object", "properties": {"message": {"type": "string"}}, "required": ["message"]}',
                help="JSON —Å—Ö–µ–º–∞ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞",
            )

            submit_button = st.form_submit_button("–°–æ–∑–¥–∞—Ç—å –ø–æ–¥-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç")

            if submit_button:
                if not name or not description or not input_schema:
                    st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
                elif not assistant_options:
                    st.error(
                        "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –±–µ–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤"
                    )
                else:
                    with st.spinner("–°–æ–∑–¥–∞–µ–º –ø–æ–¥-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç..."):
                        selected_assistant_obj = assistant_options[selected_assistant]
                        new_tool = ToolCreate(
                            name=name,
                            tool_type="sub_assistant",
                            description=description,
                            input_schema=input_schema,
                            assistant_id=selected_assistant_obj.id,
                            is_active=is_active,
                        )
                        created_tool = run_async(rest_client.create_tool(new_tool))
                        st.success(f"–ü–æ–¥-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç {created_tool.name} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
                        st.rerun()
