"""Assistants page of the admin panel"""


import pandas as pd
import streamlit as st
from rest_client import AssistantCreate, AssistantUpdate, RestServiceClient
from utils.async_utils import run_async


def show_assistants_page(rest_client: RestServiceClient):
    """Display assistants page with CRUD functionality."""
    st.title("–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    assistants = run_async(rest_client.get_assistants())
    all_tools = run_async(rest_client.get_tools())

    if not assistants:
        st.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤")
    else:
        # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤
        assistants_data = []
        for assistant in assistants:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            assistant_tools = run_async(rest_client.get_assistant_tools(assistant.id))
            tools_count = len(assistant_tools)

            assistants_data.append(
                {
                    "ID": str(assistant.id),
                    "–ò–º—è": assistant.name,
                    "–¢–∏–ø": assistant.assistant_type,
                    "–ú–æ–¥–µ–ª—å": assistant.model,
                    "–°–µ–∫—Ä–µ—Ç–∞—Ä—å": "–î–∞" if assistant.is_secretary else "–ù–µ—Ç",
                    "–ê–∫—Ç–∏–≤–µ–Ω": "–î–∞" if assistant.is_active else "–ù–µ—Ç",
                    "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã": f"{tools_count} —à—Ç.",
                }
            )

        assistants_df = pd.DataFrame(assistants_data)

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤
        st.subheader("–°–ø–∏—Å–æ–∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤")

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∏ –∫–Ω–æ–ø–∫–∏ –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö
        col1, col2 = st.columns([4, 1])

        with col1:
            st.dataframe(assistants_df, hide_index=True, use_container_width=True)

        with col2:
            for assistant in assistants:
                col_edit, col_delete, col_tools = st.columns(3)
                with col_edit:
                    if st.button(
                        "‚úèÔ∏è", key=f"edit_{assistant.id}", help="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
                    ):
                        st.session_state["editing_assistant"] = assistant
                        st.rerun()
                with col_delete:
                    if st.button("üóëÔ∏è", key=f"delete_{assistant.id}", help="–£–¥–∞–ª–∏—Ç—å"):
                        st.session_state["deleting_assistant"] = assistant
                        st.rerun()
                with col_tools:
                    if st.button(
                        "üõ†Ô∏è",
                        key=f"tools_{assistant.id}",
                        help="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏",
                    ):
                        st.session_state["managing_tools"] = assistant
                        st.rerun()

    # –°–µ–∫—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
    if "managing_tools" in st.session_state:
        assistant = st.session_state["managing_tools"]
        st.subheader(f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏: {assistant.name}")

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        assistant_tools = run_async(rest_client.get_assistant_tools(assistant.id))

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        if assistant_tools:
            st.write("–¢–µ–∫—É—â–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:")
            for tool in assistant_tools:
                col1, col2 = st.columns([4, 1])
                with col1:
                    st.write(f"- {tool.name} ({tool.tool_type})")
                with col2:
                    if st.button(
                        "üóëÔ∏è", key=f"remove_tool_{tool.id}", help="–£–¥–∞–ª–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"
                    ):
                        with st.spinner("–£–¥–∞–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç..."):
                            run_async(
                                rest_client.remove_tool_from_assistant(
                                    assistant.id, tool.id
                                )
                            )
                            st.success(f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {tool.name} —É–¥–∞–ª–µ–Ω")
                            st.rerun()
        else:
            st.info("–£ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –ø–æ–∫–∞ –Ω–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")

        # –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        with st.form("add_tool_form"):
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É
            available_tools = [
                t for t in all_tools if t.id not in [at.id for at in assistant_tools]
            ]

            if available_tools:
                selected_tool = st.selectbox(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è",
                    options=available_tools,
                    format_func=lambda x: f"{x.name} ({x.tool_type})",
                )

                submit_button = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç")

                if submit_button:
                    with st.spinner("–î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç..."):
                        run_async(
                            rest_client.add_tool_to_assistant(
                                assistant.id, selected_tool.id
                            )
                        )
                        st.success(f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {selected_tool.name} –¥–æ–±–∞–≤–ª–µ–Ω")
                        st.rerun()
            else:
                st.info("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")

        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        if st.button("–ù–∞–∑–∞–¥"):
            del st.session_state["managing_tools"]
            st.rerun()

    # –°–µ–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    with st.expander("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞", expanded=False):
        with st.form("create_assistant_form"):
            name = st.text_input("–ò–º—è")
            is_secretary = st.checkbox("–Ø–≤–ª—è–µ—Ç—Å—è —Å–µ–∫—Ä–µ—Ç–∞—Ä–µ–º")
            model = st.text_input("–ú–æ–¥–µ–ª—å")
            instructions = st.text_area("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")
            assistant_type = st.selectbox("–¢–∏–ø –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞", ["llm", "openai_api"])
            openai_assistant_id = st.text_input("ID –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ OpenAI (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")

            submit_button = st.form_submit_button("–°–æ–∑–¥–∞—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞")

            if submit_button:
                if not name or not model or not instructions:
                    st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
                else:
                    with st.spinner("–°–æ–∑–¥–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞..."):
                        new_assistant = AssistantCreate(
                            name=name,
                            is_secretary=is_secretary,
                            model=model,
                            instructions=instructions,
                            assistant_type=assistant_type,
                            openai_assistant_id=openai_assistant_id
                            if openai_assistant_id
                            else None,
                        )
                        created_assistant = run_async(
                            rest_client.create_assistant(new_assistant)
                        )
                        st.success(f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç {created_assistant.name} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
                        st.rerun()

    # –°–µ–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    if "editing_assistant" in st.session_state:
        assistant = st.session_state["editing_assistant"]
        st.subheader(f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {assistant.name}")

        with st.form("edit_assistant_form"):
            new_name = st.text_input("–ò–º—è", value=assistant.name)
            new_is_secretary = st.checkbox(
                "–Ø–≤–ª—è–µ—Ç—Å—è —Å–µ–∫—Ä–µ—Ç–∞—Ä–µ–º", value=assistant.is_secretary
            )
            new_model = st.text_input("–ú–æ–¥–µ–ª—å", value=assistant.model)
            new_instructions = st.text_area("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", value=assistant.instructions)
            new_assistant_type = st.selectbox(
                "–¢–∏–ø –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞",
                ["llm", "openai_api"],
                index=0 if assistant.assistant_type == "llm" else 1,
            )
            new_openai_assistant_id = st.text_input(
                "ID –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ OpenAI (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)",
                value=assistant.openai_assistant_id or "",
            )
            new_is_active = st.checkbox("–ê–∫—Ç–∏–≤–µ–Ω", value=assistant.is_active)

            col1, col2 = st.columns(2)
            with col1:
                submit_button = st.form_submit_button("–û–±–Ω–æ–≤–∏—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞")
            with col2:
                cancel_button = st.form_submit_button("–û—Ç–º–µ–Ω–∞")

            if submit_button:
                if not new_name or not new_model or not new_instructions:
                    st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
                else:
                    with st.spinner("–û–±–Ω–æ–≤–ª—è–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞..."):
                        updated_assistant = AssistantUpdate(
                            name=new_name,
                            is_secretary=new_is_secretary,
                            model=new_model,
                            instructions=new_instructions,
                            assistant_type=new_assistant_type,
                            openai_assistant_id=new_openai_assistant_id
                            if new_openai_assistant_id
                            else None,
                            is_active=new_is_active,
                        )
                        run_async(
                            rest_client.update_assistant(
                                assistant.id, updated_assistant
                            )
                        )
                        st.success(f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç {new_name} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
                        del st.session_state["editing_assistant"]
                        st.rerun()

            if cancel_button:
                del st.session_state["editing_assistant"]
                st.rerun()

    # –°–µ–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    if "deleting_assistant" in st.session_state:
        assistant = st.session_state["deleting_assistant"]
        st.subheader(f"–£–¥–∞–ª–∏—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {assistant.name}")

        st.warning(
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ '{assistant.name}'? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å."
        )

        col1, col2 = st.columns(2)
        with col1:
            if st.button("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ"):
                with st.spinner("–£–¥–∞–ª—è–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞..."):
                    run_async(rest_client.delete_assistant(assistant.id))
                    st.success(f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç {assistant.name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
                    del st.session_state["deleting_assistant"]
                    st.rerun()

        with col2:
            if st.button("–û—Ç–º–µ–Ω–∞"):
                del st.session_state["deleting_assistant"]
                st.rerun()
